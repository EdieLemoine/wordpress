@mixin active() {
  &:active,
  &:hover {
    @content;
  }
}

@mixin visible( $bool: true ) {
  @if $bool {
    opacity: 1;
    pointer-events: all;
  }
  @else {
    opacity: 0;
    pointer-events: none;
  }
}

// Fonts
@mixin font( $type ) {
  $map: map-get( $fonts, $type );
  font-family: unquote( map-get( $map, "family" ) + ", " + map-get( $map, "fallback" ) );
  @each $var, $val in map-get( $map, "atts" ) {
    #{$var}: $val;
  }
}

// Media Query
@mixin break( $size, $type: max ) {
  @media ( #{$type}-width: map-get($breakpoints, $size) ) {
    @content;
  }
}

// Transitions
@mixin transition( $element, $speed, $timing: ease, $delay: null ) {
  transition: $element $speed $timing;
  @if $delay != null {
    transition-delay: $delay;
  }
}

// Simple easing transitions
// Usage @include slow-transition;
@mixin slow-transition {
  @include transition(all, 1s);
}
// Usage @include simple-transition;
@mixin simple-transition {
  @include transition(all, 0.5s);
}
// Usage @include fast-transition;
@mixin fast-transition {
  @include transition(all, 0.3s);
}
// Usage @include turbo-transition;
@mixin turbo-transition {
  @include transition(all, 0.1s);
}

@mixin background( $color: $primary-color, $tint: null, $all: false) {
  @if $color == 'dark' {
    $color: $base-color-dark;
  } @elseif $color == 'light' {
    $color: $base-color-light;
  }

  @if $tint == null {
    $tint: calculate_color( $color );
  }

  background-color: $color !important;
  #{textElements( $all )} {
    color: $tint;
  }
}

// Quick size
// Usage: @include size( 100% ); If you don't include the second argument, height, it will be the same as the width.
@mixin size( $width, $height: $width ) {
  width: $width;
  height: $height;
}

// Quick position
@mixin pos( $top: 0, $right: $top, $bottom: $top, $left: $right) {
  position: absolute;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

// Inserts a background image from Lorem Pixel with the dimensions and optionally subject of your choice
// Usage: @include placeholder()
@mixin placeholder( $width: 500px, $height: $width, $subject: null ) {
  background-image: url("http://lorempixel.com/#{$width}/#{$height}/#{$subject}");
}

// Makes object transparent with primary color text and border, fills on hover.
@mixin hollow {
  background-color: transparent;
  color: $primary-color;
  @include fast-transition;
  @include border();

  &:focus,
  &:hover {
    color: white;
    background-color: $primary-color;
    border-color: $primary-color;
  }
}

// Adds an hover animated underline to the object
// Usage: @include animated-underline;
@mixin animated-underline( $type: hover, $color: $global-border-color ) {
  position: relative;
  &::after {
    content: ' ';
    height: $global-border-width;
    background-color: $color;
    width: 0;
    position: absolute;
    margin: auto;
    left: 0;
    right: 0;
    bottom: 0;
    @include simple-transition;
  }

  @if $type == focus {
    &:focus::after {
      width: 100%;
    }
  }
  @else {
    &:hover::after {
      width: 100%;
    }
  }
}

@mixin border-radius ( $sides: $global-border-radius ) {
  border-radius: $global-border-radius;
  @include fast-transition;
  @include active {
    border-radius: invert-list( $global-border-radius );
  }
}

// Apply same border to varying sides of objects
// Usage: @include border; for all sides, or for example @include border(top, left) for only top and left.
@mixin border ( $color: $global-border-color, $corners: $global-corners, $sides: '' ) {
  $style: $global-border-width solid $color;
  @if $sides != '' {
    @each $side in $sides {
      @if $side == 'top'
       or $side == 'right'
       or $side == 'bottom'
       or $side == 'left' {
        border-#{$side}: $style;
      }
    }
  }
  @else {
    border: $style;
  }
}

// Creates pure css triangle
@mixin triangle( $direction:null, $type: before, $size: $global-spacing / 4 ) {
  $deg: null;
  @if $direction == left {
    $deg: -45deg;
  }
  @elseif $direction == right {
    $deg: 135deg;
  }
  @elseif $direction == top {
    $deg: 90deg;
  }
  @elseif $direction == bottom {
    $deg: -90deg;
  }

  &::#{$type} {
    content: ' ';
    border-top: $global-border-width solid $global-border-color;
    border-left: $global-border-width solid $global-border-color;
    transform: rotate( $deg );
    display: block;
    @include size( $size );
  }
}
