@mixin transition($element, $speed, $timing: ease, $delay: null) {
  transition: $element $speed $timing !important;
  @if $delay != null {
    transition-delay: $delay;
  }
}

@mixin break( $size, $type: max ) {
  @media ( #{$type}-width: map-get($breakpoints, $size) ) {
    @content;
  }
}

@function z($key) {
  @if map-has-key($z-layers, $key) {
    @return map-get($z-layers, $key);
  }
  @warn "Unknown `#{$key}` in $z-layers.";
  @return null;
}

// Simple easing transitions
// Usage @include slow-transition;
@mixin slow-transition {
  @include transition(all, 1s);
}
// Usage @include simple-transition;
@mixin simple-transition {
  @include transition(all, 0.5s);
}
// Usage @include fast-transition;
@mixin fast-transition {
  @include transition(all, 0.3s);
}
// Usage @include turbo-transition;
@mixin turbo-transition {
  @include transition(all, 0.1s);
}

@mixin pos( $top, $right:$top, $bottom:$top, $left:$right) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

// Easily target all heading elements at once
@function headings() {
  @return 'h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6, .h-custom-headline';
}

// Easily target all text elements at once
@function textElements() {
  @return unquote( #{headings()} ) + ',' + unquote(' blockquote, p');
}

@mixin background( $color:$primary-color, $tint:null ) {

  @if $color == 'dark' {
    $color: $background-color-dark;
    @if $tint == null {
      $tint: $text-color-light;
    }
  } @elseif $color == 'light' {
    $color: $background-color-light;
    @if $tint == null {
      $tint: $text-color-dark;
    }
  } @elseif $color == $primary-color {
    $tint: $text-color-light;
  }

  background-color: $color !important;
  #{textElements()} {
    color: $tint;
  }
}

// Quick size
// Usage: @include size(100%); If you don't include the second argument, height, it will be the same as the width.
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

// Because it is annoying to type out
@mixin absolute-center( $pos: 0 ) {
  position: absolute;
  @include pos($pos);
  margin: auto;
}

// Inserts a background image from Lorem Pixel with the dimensions and optionally subject of your choice
// Usage: @include placeholder()
@mixin placeholder($width, $height, $subject:null) {
  background-image: url("http://lorempixel.com/#{$width}/#{$height}/#{$subject}");
}

// Makes object transparent with primary color text and border, fills on hover.
@mixin hollow {
  background-color: transparent;
  color: $primary-color;
  @include fast-transition;
  @include border();

  &:focus,
  &:hover {
    color: white;
    background-color: $primary-color;
    border-color: $primary-color;
  }
}

// Adds an hover animated underline to the object
// Usage: @include animated-underline;
@mixin animated-underline {
  position: relative;
  &::after {
    content: ' ';
    height: $global-border-width;
    background-color: $global-border-color;
    width: 0;
    position: absolute;
    margin: auto;
    left: 0;
    right: 0;
    bottom: 0;
    @include simple-transition;
  }

  &:hover::after {
    width: 100%;
  }
}


// Apply same border to varying sides of objects
// Usage: @include border(); for all sides, or for example @include border(top, left) for only top and left.
@mixin border ($sides...) {
  $style: $global-border-width solid $global-border-color;
  @if ($sides == null){
    border: $style;
  }
  @else {
     @each $side in $sides{
      @if ($side == 'top' or $side == 'right' or $side == 'bottom' or $side == 'left') {
        border-#{$side}: $style;
      }
    }
  }
}
