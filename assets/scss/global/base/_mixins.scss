@mixin transition($speed, $timing: ease, $delay: null) {
  transition: all $speed $timing !important;
  @if $delay != null {
    transition-delay: $delay;
  }
}

@mixin break( $size, $type: max ) {
  @media ( #{$type}-width: map-get($breakpoints, $size) ) {
    @content;
  }
}

@function z($key) {
  @if map-has-key($z-layers, $key) {
    @return map-get($z-layers, $key);
  }
  @warn "Unknown `#{$key}` in $z-layers.";
  @return null;
}

// Simple easing transitions
// Usage @include slow-transition;
@mixin slow-transition {
  @include transition(1s);
}
// Usage @include simple-transition;
@mixin simple-transition {
  @include transition(0.5s);
}
// Usage @include fast-transition;
@mixin fast-transition {
  @include transition(0.3s);
}
// Usage @include turbo-transition;
@mixin turbo-transition {
  @include transition(0.1s);
}

@mixin pos( $top, $right:$top, $bottom:$top, $left:$right) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

// Quick size
// Usage: @include size(100%); If you don't include the second argument, height, it will be the same as the width.
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

// Because it is annoying to type out
@mixin absolute-center( $pos:0 ) {
  position: absolute;
  @include pos($pos);
  margin: auto;
}

// Easily target all text elements at once
// Usage: #{textElements()} { (your styles) }
@function textElements() {
  @return 'h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6, h1 a, h2 a, h3 a, h4 a, h5 a, h6 a, .h1 a, .h2 a, .h3 a, .h4 a, .h5 a, .h6 a, blockquote, p';
}

// Easy opacity
// Usage: color: black(0.75);
@function black($opacity) {
   @return rgba(0,0,0,$opacity);
}
@function white($opacity) {
   @return rgba(255,255,255,$opacity);
}

// Inserts a background image from Lorem Pixel with the dimensions and optionally subject of your choice
// Usage: @include placeholder()
@mixin placeholder($width, $height, $subject:null) {
  background-image: url("http://lorempixel.com/#{$width}/#{$height}/#{$subject}");
}

// Makes object transparent with primary color text and border, fills on hover.
@mixin hollow {
  background-color: transparent;
  color: $primary-color;
  @include fast-transition;
  @include border();

  &:focus,
  &:hover {
    color: white;
    background-color: $primary-color;
    border-color: $primary-color;
  }
}

// Adds an hover animated underline to the object
// Usage: @include animated-underline;
@mixin animated-underline {
  position: relative;
  &::after {
    content: ' ';
    height: $global-border-width;
    background-color: $global-border-color;
    width: 0;
    position: absolute;
    margin: auto;
    left: 0;
    right: 0;
    bottom: 0;
    @include simple-transition;
  }

  &:hover::after {
    width: 100%;
  }
}


// Apply same border to varying sides of objects
// Usage: @include border(); for all sides, or for example @include border(top, left) for only top and left.
@mixin border ($sides...) {
  $style: $global-border-width solid $global-border-color;
  @if ($sides == null){
    border: $style;
  }
  @else {
     @each $side in $sides{
      @if ($side == 'top' or $side == 'right' or $side == 'bottom' or $side == 'left') {
        border-#{$side}: $style;
      }
    }
  }
}

// Set style for all 6 headings
// Usage: #{headings(1,6)} { (your styles) }
@function headings($from:1, $to:6) {
   @if $from == $to{
    @return 'h#{$from}';
  }
  @else {
     @return'h#{$from},' + headings($from+1, $to);
  }
}

// Easy Triangle
// Usage: @include triangle(32px, $primary-color, down);
@mixin triangle ($size, $color: $primary-color, $direction: down) {
  height: 0;
  width: 0;
  $width: nth($size, 1);
  $height: nth($size, length($size));
  $foreground-color: nth($color, 1);
  $background-color: if(length($color) == 2, nth($color, 2), transparent);
  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height/2);
    @if $direction == up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
    }
    @else if $direction == right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
    @else if $direction == down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;
    }
    @else if $direction == left {
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
  }
  @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;
    @if $direction == up-right {
      border-left: $width solid $background-color;
    }
    @else if $direction == up-left {
      border-right: $width solid $background-color;
    }
  }
  @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;
    @if $direction == down-right {
      border-left: $width solid $background-color;
    }
    @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  }
  @else if ($direction == inset-up) {
    border-color: $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $height $width;
  }
  @else if ($direction == inset-down) {
    border-color: $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $height $width;
  }
  @else if ($direction == inset-right) {
    border-color: $background-color $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $width $height;
  }
  @else if ($direction == inset-left) {
    border-color: $background-color $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $width $height;
  }
}
