@each $type, $attr in $fonts {
  @if to_lower_case( map-get( $attr, "source" ) ) == "google" {
    $atts: map-get( $attr, "atts" );
    $font: str-replace( map-get( $attr, "family" ), " ", "+" );
    @if map-get( $attr, "font-weight" ) != '' {
      $font: $font + ":" + map-get( $atts, "font-weight" );
    }
    @import url( "https://fonts.googleapis.com/css?family=#{$font}" );
  }
  @elseif to_lower_case( map-get( $attr, "source" ) ) == "file" {
    $file: to_lower_case( str-replace( map-get( $attr, "family" ), ' ', '-' ) );
    @font-face {
      font-family: map-get( $attr, "family" );
      src: url( "dist/fonts/" + $file + ".woff2" ) format( "woff2" ),
      url( "dist/fonts/" + $file + ".woff" ) format( "woff" );
    }
  }
}

#{headings()} {
  margin: 0.75em 0 0.15em;
  @include font( 'heading' );
}

body {
  @include font( 'body' );
  background-color: $body-background-color;
  // @include break( 'xxl', 'min' ) {
  //   font-size: map-get-deep( $fonts, "body", "atts", "font-size"  ) * 1.25;
  // }
  @include break( 'l' ) {
    font-size: map-get-deep( $fonts, "body", "atts", "font-size"  ) * 0.9;
  }
  @include break( 'm' ) {
    font-size: map-get-deep( $fonts, "body", "atts", "font-size"  ) * 0.85;
  }
  @include break( 's' ) {
    font-size: map-get-deep( $fonts, "body", "atts", "font-size"  ) * 0.8;
  }
  @include break( 'xs' ) {
    font-size: map-get-deep( $fonts, "body", "atts", "font-size"  ) * 0.75;
  }
}

@for $i from 1 through 6 {
  h#{7 - $i} {
    font-size: #{1 + $font-size-multiplier * $i }em;
    text-rendering: optimizelegibility;
    & > span {
      margin: 0 1em .3em;
    }
  }
  .h#{7 - $i} {
    @extend h#{7 - $i};
  }
}

@if $navbar-brand-image == false {
  .x-brand {
    @include font( 'heading' );
  }
}

::selection {
  background-color: $primary-color;
  color: calculate-color($primary-color);
}
