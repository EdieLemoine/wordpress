// Simple easing transitions
// Usage @include slow-transition;
@mixin slow-transition {
  transition: all 1s ease !important;
}
// Usage @include simple-transition;
@mixin simple-transition {
  transition: all 0.5s ease !important;
}
// Usage @include fast-transition;
@mixin fast-transition {
  transition: all 0.3s ease !important;
}
// Adds an hover animated underline to the object
// Usage: @include animated-underline;
@mixin animated-underline {
  &::after {
    content: "";
    height: 3px;
    background-color: $primary-color;
    position: absolute;
    width: 0;
    margin: auto;
    left: 0;
    right: 0;
    bottom: 0;
    @include simple-transition;
  }

  &:hover::after {
    width: 100%;
  }
}
// Inserts a background image from Lorem Pixel with the dimensions and optionally subject of your choice
// Usage: @include placeholder()
@mixin placeholder($width, $height, $subject:null) {
  background-image: url("http://lorempixel.com/#{$width}/#{$height}/#{$subject}");
}
// Because it is annoying to type out
@mixin full-size {
  height: 100%;
  width: 100%;
}
// Same as the previous one
@mixin absolute-center {
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  margin: auto;
}
// Quickly add pseudo element
@mixin pseudo($display: block, $pos: absolute, $content: ''){
  content: $content;
  display: $display;
  position: $pos;
}
// Apply same border to varying sides of objects
// Usage: @include border(); for all sides, or for example @include border(top, left) for only top and left.
@mixin border ($width: 4px, $color: null, $sides...) {
  @if ($color == null){
    $color: $border-color;
  }
  @each $side in $sides {
    @if ($side == 'top' or $side == 'right' or $side == 'bottom' or $side == 'left'){
      border-#{$side}: $width solid $color;
    }
    @else {
      border: $width solid $color;
    }
  }
}
// Set style for all 6 headings
@function headings($from:1, $to:6) {
   @if $from == $to{
    @return 'h#{$from}';
  }
  @else {
     @return'h#{$from},' + headings($from+1, $to);
  }
}
// Clearfix | Ever had an element that wouldn't stretch to its contents? Clearfix that shit.
// Usage: @extend %clearfix;

%clearfix {
  *zoom: 1;

  &:after,
  &:before {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }
}
// Visually hide an element without removing it
// Usage: @extend %visuallyhidden;

%visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}
// Easy opacity
// Usage: color: black(0.75);
@function black($opacity) {
   @return rgba(0,0,0,$opacity);
}
@function white($opacity) {
   @return rgba(255,255,255,$opacity);
}
// Easy Triangle
// Usage: @include triangle(32px, $primary-color, down);
@mixin triangle ($size, $color, $direction) {
  height: 0;
  width: 0;
  $width: nth($size, 1);
  $height: nth($size, length($size));
  $foreground-color: nth($color, 1);
  $background-color: if(length($color) == 2, nth($color, 2), transparent);
  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height/2);
    @if $direction == up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
    }
    @else if $direction == right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
    @else if $direction == down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;
    }
    @else if $direction == left {
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
  }
  @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;
    @if $direction == up-right {
      border-left: $width solid $background-color;
    }
    @else if $direction == up-left {
      border-right: $width solid $background-color;
    }
  }
  @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;
    @if $direction == down-right {
      border-left: $width solid $background-color;
    }
    @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  }
  @else if ($direction == inset-up) {
    border-color: $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $height $width;
  }
  @else if ($direction == inset-down) {
    border-color: $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $height $width;
  }
  @else if ($direction == inset-right) {
    border-color: $background-color $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $width $height;
  }
  @else if ($direction == inset-left) {
    border-color: $background-color $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $width $height;
  }
}
// Quick size
// Usage: @include size(100%); If you don't include the second argument, height, it will be the same as the width.
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}
