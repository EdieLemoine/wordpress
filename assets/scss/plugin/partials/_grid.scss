.ep-row {
  overflow: hidden;
  display: flex;
  align-items: stretch;
  // @include break( 'l', 'min' ) {
  // }
  // &:nth-child(2n) {
  //   flex-direction: row-reverse;
  // }
}

.ep-row-flex {
  @extend .ep-row;
  flex-wrap: wrap;
  margin: -($global-spacing / 8);
}

.ep-col-flex {
  padding: $global-spacing / 8;
}

.ep {
  // display: flex;
  // flex: 1;
  // align-content: stretch;
  position: relative;
  // overflow: hidden;
  @include break( 'l', 'min' ) {
    // min-height: 50vh;
  }
  // @include break( $mobile-breakpoint ) {
  //   width: 100%;
  //   flex-basis: 100% !important;
  // }
  .x-container {
    margin: auto;
  }
  // 1/1 = 12
  // 1/2 = 6
  // 1/3 = 4
  // 1/4 = 3
  // 1/6 = 2
}

// Create grid structure
@for $a from 1 through 8 {
  @for $b from 1 through 8 {
    $left: $b % $a;
    @if $left == 1 {
      $left: 100;
    }
    @if $a != $b
    and $left != 0
    and $left > 0
    and ( $a % $left ) != 0
    and $a < $b
    or $a == 1 {
      .ep-#{$a}-#{$b} {
        flex-basis: 100% / ( $b / $a );
      }
    }
  }
}

// Create grid structure for each breakpoint in $breakpoints
// Reverse map if the order of breakpoints would override each other the wrong way
@if last-value( $breakpoints, true ) > first-value( $breakpoints, true ) {
  $breakpoints: map-reverse( $breakpoints );
}

@each $breakpoint in map-keys( $breakpoints ) {
  @warn $breakpoint;
  @include break( $breakpoint ) {
    @for $a from 1 through 8 {
      @for $b from 1 through 8 {
        // Don't output anything where:
        // $a equals $b ( 2-2, 3-3, 4-4 -> all 100% )
        // $a is smaller than $b ( 3-2 -> over 100% )
        // You can simplify the fractions ( 2-4, 3-9 -> 50%, 33% )
        // But do output 1-1 to 1-12
        $left: $b % $a;

        // @debug '.ep-#{$breakpoint}-#{$a}-#{$b} | #{$b} % #{$a} = #{$left}';

        // HACK: To stop excluding cols where the leftover is 1
        @if $left == 1 {
          $left: 100;
        }
        @if $a != $b
        and $left != 0
        and $left > 0
        and ( $a % $left ) != 0
        and $a < $b
        or $a == 1 {
          // @debug 'OUTPUT';
          .ep-#{$breakpoint}-#{$a}-#{$b} {
            flex-basis: 100% / ( $b / $a );
          }
        }
      }
    }
  }
}
